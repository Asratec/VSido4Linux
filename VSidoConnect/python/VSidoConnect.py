# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VSidoConnect', [dirname(__file__)])
        except ImportError:
            import _VSidoConnect
            return _VSidoConnect
        if fp is not None:
            try:
                _mod = imp.load_module('_VSidoConnect', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _VSidoConnect = swig_import_helper()
    del swig_import_helper
else:
    import _VSidoConnect
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def connect(*args):
    return _VSidoConnect.connect(*args)
connect = _VSidoConnect.connect

def disConnect():
    return _VSidoConnect.disConnect()
disConnect = _VSidoConnect.disConnect
class Request(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Request, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Request, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VSidoConnect.delete_Request
    __del__ = lambda self: None
Request_swigregister = _VSidoConnect.Request_swigregister
Request_swigregister(Request)


def execWithJsonResult(req):
    return _VSidoConnect.execWithJsonResult(req)
execWithJsonResult = _VSidoConnect.execWithJsonResult
class AngleRequest(Request):
    __swig_setmethods__ = {}
    for _s in [Request]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AngleRequest, name, value)
    __swig_getmethods__ = {}
    for _s in [Request]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AngleRequest, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VSidoConnect.new_AngleRequest()
        try:
            self.this.append(this)
        except:
            self.this = this

    def cycle(self, cyc):
        return _VSidoConnect.AngleRequest_cycle(self, cyc)

    def angle(self, arg2, deg):
        return _VSidoConnect.AngleRequest_angle(self, arg2, deg)
    __swig_destroy__ = _VSidoConnect.delete_AngleRequest
    __del__ = lambda self: None
AngleRequest_swigregister = _VSidoConnect.AngleRequest_swigregister
AngleRequest_swigregister(AngleRequest)

class ComplianceRequest(Request):
    __swig_setmethods__ = {}
    for _s in [Request]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComplianceRequest, name, value)
    __swig_getmethods__ = {}
    for _s in [Request]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ComplianceRequest, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VSidoConnect.new_ComplianceRequest()
        try:
            self.this.append(this)
        except:
            self.this = this

    def comp(self, sid, cp1, cp2):
        return _VSidoConnect.ComplianceRequest_comp(self, sid, cp1, cp2)
    __swig_destroy__ = _VSidoConnect.delete_ComplianceRequest
    __del__ = lambda self: None
ComplianceRequest_swigregister = _VSidoConnect.ComplianceRequest_swigregister
ComplianceRequest_swigregister(ComplianceRequest)

class MinMaxAngleRequest(Request):
    __swig_setmethods__ = {}
    for _s in [Request]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MinMaxAngleRequest, name, value)
    __swig_getmethods__ = {}
    for _s in [Request]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MinMaxAngleRequest, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VSidoConnect.new_MinMaxAngleRequest()
        try:
            self.this.append(this)
        except:
            self.this = this

    def minMax(self, sid, min, max):
        return _VSidoConnect.MinMaxAngleRequest_minMax(self, sid, min, max)
    __swig_destroy__ = _VSidoConnect.delete_MinMaxAngleRequest
    __del__ = lambda self: None
MinMaxAngleRequest_swigregister = _VSidoConnect.MinMaxAngleRequest_swigregister
MinMaxAngleRequest_swigregister(MinMaxAngleRequest)

class ServoInfoRequest(Request):
    __swig_setmethods__ = {}
    for _s in [Request]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServoInfoRequest, name, value)
    __swig_getmethods__ = {}
    for _s in [Request]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServoInfoRequest, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VSidoConnect.new_ServoInfoRequest()
        try:
            self.this.append(this)
        except:
            self.this = this

    def info(self, sid, address, length):
        return _VSidoConnect.ServoInfoRequest_info(self, sid, address, length)
    __swig_destroy__ = _VSidoConnect.delete_ServoInfoRequest
    __del__ = lambda self: None
ServoInfoRequest_swigregister = _VSidoConnect.ServoInfoRequest_swigregister
ServoInfoRequest_swigregister(ServoInfoRequest)

class Response(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Response, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Response, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def JSON(self):
        return _VSidoConnect.Response_JSON(self)
    __swig_destroy__ = _VSidoConnect.delete_Response
    __del__ = lambda self: None
Response_swigregister = _VSidoConnect.Response_swigregister
Response_swigregister(Response)

class AckResponse(Response):
    __swig_setmethods__ = {}
    for _s in [Response]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AckResponse, name, value)
    __swig_getmethods__ = {}
    for _s in [Response]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, AckResponse, name)
    __repr__ = _swig_repr

    def __init__(self, uart, req):
        this = _VSidoConnect.new_AckResponse(uart, req)
        try:
            self.this.append(this)
        except:
            self.this = this

    def msg(self):
        return _VSidoConnect.AckResponse_msg(self)

    def JSON(self):
        return _VSidoConnect.AckResponse_JSON(self)
    __swig_destroy__ = _VSidoConnect.delete_AckResponse
    __del__ = lambda self: None
AckResponse_swigregister = _VSidoConnect.AckResponse_swigregister
AckResponse_swigregister(AckResponse)

class ServoInfoResponse(Response):
    __swig_setmethods__ = {}
    for _s in [Response]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServoInfoResponse, name, value)
    __swig_getmethods__ = {}
    for _s in [Response]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServoInfoResponse, name)
    __repr__ = _swig_repr

    def __init__(self, uart, req):
        this = _VSidoConnect.new_ServoInfoResponse(uart, req)
        try:
            self.this.append(this)
        except:
            self.this = this

    def JSON(self):
        return _VSidoConnect.ServoInfoResponse_JSON(self)

    def info(self):
        return _VSidoConnect.ServoInfoResponse_info(self)
    __swig_destroy__ = _VSidoConnect.delete_ServoInfoResponse
    __del__ = lambda self: None
ServoInfoResponse_swigregister = _VSidoConnect.ServoInfoResponse_swigregister
ServoInfoResponse_swigregister(ServoInfoResponse)

# This file is compatible with both classic and new-style classes.


