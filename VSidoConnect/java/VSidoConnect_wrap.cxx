/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <string>


#include "cpp/VSidoConnect.hpp"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_VSidoConnectJNI_connect_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  std::string *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return ;
  std::string arg1_str(arg1_pstr);
  arg1 = &arg1_str;
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  try {
    VSido::connect((std::string const &)*arg1);
  }
  catch(std::string &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->c_str());
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_VSidoConnectJNI_connect_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  try {
    VSido::connect();
  }
  catch(std::string &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->c_str());
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_VSidoConnectJNI_disConnect(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  try {
    VSido::disConnect();
  }
  catch(std::string &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, (&_e)->c_str());
    return ; 
  }
  
}


SWIGEXPORT void JNICALL Java_VSidoConnectJNI_delete_1Request(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VSido::Request *arg1 = (VSido::Request *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VSido::Request **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_VSidoConnectJNI_execWithJsonResult(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  VSido::Request *arg1 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VSido::Request **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VSido::Request & reference is null");
    return 0;
  } 
  result = VSido::execWithJsonResult(*arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_VSidoConnectJNI_new_1AngleRequest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  VSido::AngleRequest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (VSido::AngleRequest *)new VSido::AngleRequest();
  *(VSido::AngleRequest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_VSidoConnectJNI_AngleRequest_1cycle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  VSido::AngleRequest *arg1 = (VSido::AngleRequest *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VSido::AngleRequest **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->cycle(arg2);
}


SWIGEXPORT void JNICALL Java_VSidoConnectJNI_AngleRequest_1angle(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3) {
  VSido::AngleRequest *arg1 = (VSido::AngleRequest *) 0 ;
  unsigned char arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VSido::AngleRequest **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->angle(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_VSidoConnectJNI_delete_1AngleRequest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VSido::AngleRequest *arg1 = (VSido::AngleRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VSido::AngleRequest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_VSidoConnectJNI_new_1ComplianceRequest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  VSido::ComplianceRequest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (VSido::ComplianceRequest *)new VSido::ComplianceRequest();
  *(VSido::ComplianceRequest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_VSidoConnectJNI_ComplianceRequest_1comp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3, jshort jarg4) {
  VSido::ComplianceRequest *arg1 = (VSido::ComplianceRequest *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VSido::ComplianceRequest **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  (arg1)->comp(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_VSidoConnectJNI_delete_1ComplianceRequest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VSido::ComplianceRequest *arg1 = (VSido::ComplianceRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VSido::ComplianceRequest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_VSidoConnectJNI_new_1MinMaxAngleRequest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  VSido::MinMaxAngleRequest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (VSido::MinMaxAngleRequest *)new VSido::MinMaxAngleRequest();
  *(VSido::MinMaxAngleRequest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_VSidoConnectJNI_MinMaxAngleRequest_1minMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jint jarg3, jint jarg4) {
  VSido::MinMaxAngleRequest *arg1 = (VSido::MinMaxAngleRequest *) 0 ;
  unsigned char arg2 ;
  int arg3 ;
  int arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VSido::MinMaxAngleRequest **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  (arg1)->minMax(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_VSidoConnectJNI_delete_1MinMaxAngleRequest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VSido::MinMaxAngleRequest *arg1 = (VSido::MinMaxAngleRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VSido::MinMaxAngleRequest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_VSidoConnectJNI_new_1ServoInfoRequest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  VSido::ServoInfoRequest *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (VSido::ServoInfoRequest *)new VSido::ServoInfoRequest();
  *(VSido::ServoInfoRequest **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_VSidoConnectJNI_ServoInfoRequest_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2, jshort jarg3, jshort jarg4) {
  VSido::ServoInfoRequest *arg1 = (VSido::ServoInfoRequest *) 0 ;
  unsigned char arg2 ;
  unsigned char arg3 ;
  unsigned char arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VSido::ServoInfoRequest **)&jarg1; 
  arg2 = (unsigned char)jarg2; 
  arg3 = (unsigned char)jarg3; 
  arg4 = (unsigned char)jarg4; 
  (arg1)->info(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_VSidoConnectJNI_delete_1ServoInfoRequest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VSido::ServoInfoRequest *arg1 = (VSido::ServoInfoRequest *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VSido::ServoInfoRequest **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_VSidoConnectJNI_Response_1JSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  VSido::Response *arg1 = (VSido::Response *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VSido::Response **)&jarg1; 
  result = (arg1)->JSON();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_VSidoConnectJNI_delete_1Response(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VSido::Response *arg1 = (VSido::Response *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VSido::Response **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_VSidoConnectJNI_new_1AckResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  list< unsigned char > arg1 ;
  VSido::Request *arg2 = 0 ;
  list< unsigned char > *argp1 ;
  VSido::AckResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  argp1 = *(list< unsigned char > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null list< unsigned char >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(VSido::Request **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VSido::Request & reference is null");
    return 0;
  } 
  result = (VSido::AckResponse *)new VSido::AckResponse(arg1,*arg2);
  *(VSido::AckResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_VSidoConnectJNI_AckResponse_1msg(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  VSido::AckResponse *arg1 = (VSido::AckResponse *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VSido::AckResponse **)&jarg1; 
  result = (arg1)->msg();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_VSidoConnectJNI_AckResponse_1JSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  VSido::AckResponse *arg1 = (VSido::AckResponse *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VSido::AckResponse **)&jarg1; 
  result = (arg1)->JSON();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_VSidoConnectJNI_delete_1AckResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VSido::AckResponse *arg1 = (VSido::AckResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VSido::AckResponse **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_VSidoConnectJNI_new_1ServoInfoResponse(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  list< unsigned char > arg1 ;
  VSido::Request *arg2 = 0 ;
  list< unsigned char > *argp1 ;
  VSido::ServoInfoResponse *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  argp1 = *(list< unsigned char > **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null list< unsigned char >");
    return 0;
  }
  arg1 = *argp1; 
  arg2 = *(VSido::Request **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "VSido::Request & reference is null");
    return 0;
  } 
  result = (VSido::ServoInfoResponse *)new VSido::ServoInfoResponse(arg1,*arg2);
  *(VSido::ServoInfoResponse **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_VSidoConnectJNI_ServoInfoResponse_1JSON(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  VSido::ServoInfoResponse *arg1 = (VSido::ServoInfoResponse *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VSido::ServoInfoResponse **)&jarg1; 
  result = (arg1)->JSON();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_VSidoConnectJNI_ServoInfoResponse_1info(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  VSido::ServoInfoResponse *arg1 = (VSido::ServoInfoResponse *) 0 ;
  map< unsigned char,list< tuple< std::string,int > > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(VSido::ServoInfoResponse **)&jarg1; 
  result = (arg1)->info();
  *(map< unsigned char,list< tuple< std::string,int > > > **)&jresult = new map< unsigned char,list< tuple< std::string,int > > >((const map< unsigned char,list< tuple< std::string,int > > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_VSidoConnectJNI_delete_1ServoInfoResponse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  VSido::ServoInfoResponse *arg1 = (VSido::ServoInfoResponse *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(VSido::ServoInfoResponse **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_VSidoConnectJNI_AngleRequest_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(VSido::Request **)&baseptr = *(VSido::AngleRequest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_VSidoConnectJNI_ComplianceRequest_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(VSido::Request **)&baseptr = *(VSido::ComplianceRequest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_VSidoConnectJNI_MinMaxAngleRequest_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(VSido::Request **)&baseptr = *(VSido::MinMaxAngleRequest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_VSidoConnectJNI_ServoInfoRequest_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(VSido::Request **)&baseptr = *(VSido::ServoInfoRequest **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_VSidoConnectJNI_AckResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(VSido::Response **)&baseptr = *(VSido::AckResponse **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_VSidoConnectJNI_ServoInfoResponse_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(VSido::Response **)&baseptr = *(VSido::ServoInfoResponse **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

